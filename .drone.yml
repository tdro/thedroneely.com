kind: pipeline
type: docker
name: build-package-deploy

steps:

- name: build
  image: composer:1.8.6

  commands:

  - composer -V
  - composer install


- name: secrets
  image: serve.work/alpine-ci:3.11.3

  environment:

    EMAIL_HOST:
      from_secret: email_host
    EMAIL_PORT:
      from_secret: email_port
    EMAIL_NAME:
      from_secret: email_name
    EMAIL_USERNAME:
      from_secret: email_username
    EMAIL_PASSWORD:
      from_secret: email_password
    PGSQL_DATABASE:
      from_secret: pgsql_database
    PGSQL_USERNAME:
      from_secret: pgsql_username
    PGSQL_PASSWORD:
      from_secret: pgsql_password
    CMS_API_TOKEN:
      from_secret: cms_api_token
    KEYBASE_VERIFICATION:
      from_secret: keybase_verification
    GOOGLE_SITE_VERIFICATION:
      from_secret: google_site_verification

  commands:

  - mv AppConfigBuild.php AppConfig.php
  - sed -i "s|pgsql_database|$(echo $PGSQL_DATABASE | base64 -d)|" AppConfig.php
  - sed -i "s|pgsql_username|$(echo $PGSQL_USERNAME | base64 -d)|" AppConfig.php
  - sed -i "s|pgsql_password|$(echo $PGSQL_PASSWORD | base64 -d)|" AppConfig.php
  - sed -i "s|email_host|$(echo $EMAIL_HOST | base64 -d)|" AppConfig.php
  - sed -i "s|email_port|$(echo $EMAIL_PORT | base64 -d)|" AppConfig.php
  - sed -i "s|email_name|$(echo $EMAIL_NAME | base64 -d)|" AppConfig.php
  - sed -i "s|email_username|$(echo $EMAIL_USERNAME | base64 -d)|" AppConfig.php
  - sed -i "s|email_password|$(echo $EMAIL_PASSWORD | base64 -d)|" AppConfig.php
  - sed -i "s|cms_api_token|$(echo $CMS_API_TOKEN | base64 -d)|" AppConfig.php
  - echo "$KEYBASE_VERIFICATION" | base64 -d > public/.well-known/keybase.txt
  - echo "$GOOGLE_SITE_VERIFICATION" | base64 -d > public/$(echo $GOOGLE_SITE_VERIFICATION | base64 -d | awk '{ print $2 }')


- name: synchronize
  image: serve.work/alpine-ci:3.11.3

  environment:

    NAME: thedroneely.com

    SSH_KEY:
     from_secret: ssh_key
    SSH_KEY_PASSWORD:
      from_secret: ssh_key_password
    SSH_KNOWN_HOSTS:
      from_secret: ssh_known_hosts
    SERVER_USER:
      from_secret: server_user
    ORIGIN_HOST:
      from_secret: origin_host
    ORIGIN_USER:
      from_secret: origin_user
    ORIGIN_PORT:
      from_secret: origin_port

  commands:

  - echo "$SSH_KEY" | base64 -d > ssh-key && chmod 600 ssh-key
  - eval $(ssh-agent)
  - echo "$SSH_KEY_PASSWORD" | base64 -d | ssh-add ssh-key
  - echo "$SSH_KNOWN_HOSTS" | base64 -d > /etc/ssh/ssh_known_hosts

  - ansible -m ping upstream

  - ansible-playbook .deploy.yml --tags "synchronize"


- name: minify
  image: serve.work/alpine-ci:3.11.3

  commands:

  - wget https://github.com/tdewolff/minify/releases/download/v2.5.0/minify_2.5.0_linux_amd64.tar.gz -O minify.tar.gz
  - tar -xvf minify.tar.gz

  - ./minify --version
  - ./minify public/css/tdro.css > public/css/tdro.min.$(date +%d%m%Y%H%M).css
  - ./minify public/css/tdro-dark.css > public/css/tdro-dark.min.$(date +%d%m%Y%H%M).css
  - ./minify public/css/bulma-timeline.css > public/css/bulma-timeline.min.$(date +%d%m%Y%H%M).css
  - ./minify public/css/syntax-highlight.css > public/css/syntax-highlight.min.$(date +%d%m%Y%H%M).css
  - ./minify public/js/app.js > public/js/app-js.min.$(date +%d%m%Y%H%M).js

  - sed -i "s|tdro.css|$(find public/css -name "tdro.min*" | awk -F/ '{print $NF}')|" app/views/snippets/stylesheets.php
  - sed -i "s|tdro-dark.css|$(find public/css -name "tdro-dark.min*" | awk -F/ '{print $NF}')|" app/views/snippets/stylesheets.php
  - sed -i "s|bulma-timeline.css|$(find public/css -name "bulma-timeline.min*" | awk -F/ '{print $NF}')|" app/views/resume.view.php
  - sed -i "s|syntax-highlight.css|$(find public/css -name "syntax-highlight.min*" | awk -F/ '{print $NF}')|" generators/hugo/themes/tdro/layouts/_default/single.html
  - sed -i "s|app.js|$(find public/js -name "app-js.min*" | awk -F/ '{print $NF}')|" app/views/partials/footer.php


- name: prepare
  image: serve.work/alpine-ci:3.11.3

  commands:

  - sed -i 's|""|"https://www.thedroneely.com/"|' generators/hugo/config.yaml
  - grep baseURL generators/hugo/config.yaml
  - cd generators/hugo && ln -s ../../public/ public


- name: package
  image: serve.work/alpine-ci:3.11.3

  environment:

    NAME: thedroneely.com

    SSH_KEY:
      from_secret: ssh_key
    SSH_KEY_PASSWORD:
      from_secret: ssh_key_password
    SSH_KNOWN_HOSTS:
      from_secret: ssh_known_hosts
    SERVER_USER:
      from_secret: server_user

  commands:

  - echo "$SSH_KEY" | base64 -d > ssh-key && chmod 600 ssh-key
  - eval $(ssh-agent)
  - echo "$SSH_KEY_PASSWORD" | base64 -d | ssh-add ssh-key
  - echo "$SSH_KNOWN_HOSTS" | base64 -d > /etc/ssh/ssh_known_hosts

  - >
    tar -zcvf $NAME.tar.gz app bootstrap generators
    public vendor AppConfig.php composer.json composer.lock

  - scp -r -vT -i ssh-key $NAME.tar.gz $(echo $SERVER_USER | base64 -d)@$NAME:/srv/deploys/$NAME/


- name: deploy
  image: serve.work/alpine-ci:3.11.3

  environment:

    NAME: thedroneely.com

    SSH_KEY:
      from_secret: ssh_key
    SSH_KEY_PASSWORD:
      from_secret: ssh_key_password
    SSH_KNOWN_HOSTS:
      from_secret: ssh_known_hosts

  commands:

  - export DATE=$(date +%H%M-%d%m-%Y)

  - echo "$SSH_KEY" | base64 -d > ssh-key && chmod 600 ssh-key
  - eval $(ssh-agent)
  - echo "$SSH_KEY_PASSWORD" | base64 -d | ssh-add ssh-key
  - echo "$SSH_KNOWN_HOSTS" | base64 -d > /etc/ssh/ssh_known_hosts

  - ansible-playbook .deploy.yml --tags "deploy"
